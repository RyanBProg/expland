generator client {
  provider = "prisma-client-js"
  output   = "../prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAccount {
  id             String   @id @default(uuid())
  username       String   @unique
  email          String   @unique
  emailVerified  Boolean  @default(false)
  passwordHash   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  givenName      String
  familyName     String
  refreshTokenId String

  // relations
  profile   UserProfile?
  travel    Travel[]
  wishlist  Wishlist[]
  followers Follow[]     @relation("Followee")
  following Follow[]     @relation("Follower")

  @@index([email, username])
}

model UserProfile {
  id                String  @id @default(uuid())
  userId            String  @unique
  profilePictureUrl String?
  bio               String? @db.Text
  location          String?

  // relations
  user UserAccount @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Follow {
  id         Int      @id @default(autoincrement())
  followerId String
  followeeId String
  createdAt  DateTime @default(now())

  // relations
  follower UserAccount @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followee UserAccount @relation("Followee", fields: [followeeId], references: [id], onDelete: Cascade)

  // ensures each pair of follower and followee can only exist once
  @@unique([followerId, followeeId])
  @@index([followerId])
  @@index([followeeId])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    String
  countryId Int
  cityId    Int?
  createdAt DateTime @default(now())

  // relations
  user    UserAccount @relation(fields: [userId], references: [id], onDelete: Cascade)
  country Country     @relation(fields: [countryId], references: [id], onDelete: Cascade)
  city    City?       @relation(fields: [cityId], references: [id], onDelete: Cascade)

  // ensures each pair of userId and countryId can only exist once
  @@unique([userId, countryId])
  @@index([userId])
}

model Travel {
  id          Int      @id @default(autoincrement())
  userId      String
  countryId   Int?
  description String?  @db.Text
  dateTravel  DateTime
  duration    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  user    UserAccount  @relation(fields: [userId], references: [id], onDelete: Cascade)
  country Country?     @relation(fields: [countryId], references: [id], onDelete: SetNull)
  cities  TravelCity[]

  @@index([userId])
}

model TravelCity {
  id        Int      @id @default(autoincrement())
  travelId  Int
  cityId    Int
  createdAt DateTime @default(now())

  // relations
  travel Travel @relation(fields: [travelId], references: [id], onDelete: Cascade)
  city   City   @relation(fields: [cityId], references: [id], onDelete: Cascade)

  @@unique([travelId, cityId])
  @@index([travelId])
  @@index([cityId])
}

model Country {
  id              Int      @id @default(autoincrement())
  name            String
  official_name   String
  iso_2           String   @unique @db.Char(2)
  iso_num         String?  @unique
  region          String
  subregion       String?
  continents      String[]
  languages       String[]
  capital         String?
  population      Int?
  landArea        Int?
  landlocked      Boolean
  independent     Boolean
  currency        String?
  timezones       String[]
  latitude        Float?
  longitude       Float?
  google_maps_url String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // relations
  travels  Travel[]
  wishlist Wishlist[]
  cities   City[]

  @@index([name])
  @@index([iso_2])
}

model City {
  id            Int      @id @default(autoincrement())
  countryId     Int
  country_iso_2 String   @db.Char(2)
  name          String
  population    Int?
  timezone      String
  latitude      Float?
  longitude     Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // relations
  travels  TravelCity[]
  wishlist Wishlist[]
  country  Country      @relation(fields: [countryId], references: [id], onDelete: Cascade)

  @@index([countryId])
  @@index([name])
  @@index([country_iso_2])
}
