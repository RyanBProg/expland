generator client {
  provider = "prisma-client-js"
  output   = "../prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAccount {
  id             String   @id @default(uuid())
  username       String   @unique
  email          String   @unique
  emailVerified  Boolean  @default(false)
  passwordHash   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  givenName      String
  familyName     String
  refreshTokenId String

  // relations
  profile   UserProfile?
  travel    Travel[]
  wishlist  Wishlist[]
  followers Follow[]     @relation("Followee")
  following Follow[]     @relation("Follower")
}

model UserProfile {
  id                String  @id @default(uuid())
  userId            String  @unique
  profilePictureUrl String?
  bio               String?
  location          String?

  // relations
  user UserAccount @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follow {
  id         Int      @id @default(autoincrement())
  followerId String
  followeeId String
  createdAt  DateTime @default(now())

  // relations
  follower UserAccount @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followee UserAccount @relation("Followee", fields: [followeeId], references: [id], onDelete: Cascade)

  // ensures each pair of follower and followee can only exist once
  @@unique([followerId, followeeId])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    String
  countryId Int
  cityId    Int?
  createdAt DateTime @default(now())

  // relations
  user    UserAccount @relation(fields: [userId], references: [id], onDelete: Cascade)
  country Country     @relation(fields: [countryId], references: [id], onDelete: Cascade)
  city    City?       @relation(fields: [cityId], references: [id], onDelete: Cascade)

  // ensures each pair of userId and countryId can only exist once
  @@unique([userId, countryId])
}

model Travel {
  id          Int      @id @default(autoincrement())
  userId      String
  countryId   Int?
  cityId      Int?
  title       String
  description String?
  dateTravel  DateTime
  duration    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  user    UserAccount @relation(fields: [userId], references: [id], onDelete: Cascade)
  country Country?    @relation(fields: [countryId], references: [id], onDelete: SetNull)
  city    City?       @relation(fields: [cityId], references: [id], onDelete: SetNull)
}

model Country {
  id           Int      @id @default(autoincrement())
  code         String   @unique
  name         String
  continent    String
  flagImageUrl String?
  capital      String?
  population   Int?
  languages    String[]
  landArea     Float?
  currency     String?
  timezones    String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // relations
  travels  Travel[]
  wishlist Wishlist[]
  cities   City[]
}

model City {
  id         Int      @id @default(autoincrement())
  countryId  Int
  code       String   @unique
  name       String
  population Int?
  languages  String[]
  landArea   Float?
  currency   String?
  timezones  String[]
  longitude  Float?
  latitude   Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // relations
  travels  Travel[]
  wishlist Wishlist[]
  country  Country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
}
